项目中的设计模式应用分析

1. 工厂模式的应用

1.1 负载均衡工厂 (LoadBalanceFactory)

位置：src/main/java/client/serviceCenter/balance/LoadBalanceFactory.java
实现：通过静态工厂方法getLoadBalance(BalanceType type)根据不同类型参数创建不同的负载均衡实现
支持策略：一致性哈希(CONSISTENCY_HASH)、随机(RANDOM)、LSTM负载均衡
扩展性：新增负载均衡算法只需在枚举中添加新类型并在工厂方法中增加对应实现

1.2 序列化器工厂 (Serializer)

位置：src/main/java/common/serializer/Serializer.java
实现：通过静态工厂方法getSerializerByCode(int code)根据编码创建不同的序列化器实现
支持策略：Java原生序列化(0)、JSON序列化(1)、Protobuf序列化(2)
使用示例：在Encoder和Decoder中通过类型码获取对应序列化器

1.3 熔断器提供者 (BreakerProvider)

位置：src/main/java/client/proxy/breaker/BreakerProvider.java
实现：通过getBreaker(String serviceName)方法创建或获取服务对应的熔断器
特点：采用惰性实例化模式，首次请求时创建熔断器并缓存

1.4 限流器提供者 (RateLimitProvider)

位置：src/main/java/server/provider/ratelimit/RateLimitProvider.java
实现：通过getRateLimiter(String serviceName)方法为每个服务提供限流器实例
特点：按需创建限流器，使用ConcurrentHashMap缓存已创建的实例

2. 策略模式的应用

2.1 负载均衡策略 (LoadBalance)

接口：src/main/java/client/serviceCenter/balance/LoadBalance.java
实现类：
ConsistencyHashBalance: 一致性哈希负载均衡，保证相同请求路由到相同节点
RandomLoadBalance: 随机负载均衡，简单高效
使用示例：在ZKServiceCenter中通过构造函数注入不同的负载均衡策略
客户端配置：NettyRpcClient支持在创建时指定负载均衡类型

2.2 序列化策略 (Serializer)

接口：src/main/java/common/serializer/Serializer.java
实现类：
ObjectSerializer: Java原生序列化，简单但性能一般
JsonSerializer: 基于FastJSON的序列化，可读性好
ProtobufSerializer: 基于Google Protobuf的二进制序列化，性能最佳
使用场景：在Encoder中初始化时传入序列化类型，决定编码方式

2.3 限流策略 (RateLimit)

接口：src/main/java/server/provider/ratelimit/RateLimit.java
实现类：
TokenBucketRateLimit: 基于令牌桶算法的限流实现
扩展可能：设计为接口便于后续实现滑动窗口、漏桶等其他限流算法
使用场景：在NettyServerHandler中处理请求前进行限流判断

2.4 服务发现策略 (ServiceCenter)

接口：src/main/java/client/serviceCenter/ServiceCenter.java
实现类：
ZKServiceCenter: 基于Zookeeper的服务发现实现
扩展可能：设计为接口便于后续实现基于其他注册中心的服务发现

3. 组合应用

3.1 客户端代理 (ClientProxy)

位置：src/main/java/client/proxy/ClientProxy.java
设计：结合JDK动态代理、熔断器和重试机制
关键点：
通过构造函数可注入不同负载均衡策略
内部使用BreakerProvider获取服务对应熔断器
根据服务白名单决定是否使用GuavaRetry进行重试

3.2 服务提供者 (ServiceProvider)

位置：src/main/java/server/provider/ServiceProvider.java
设计：组合服务注册中心和限流器提供者
关键点：
封装了服务实例映射和注册逻辑
通过RateLimitProvider为每个服务提供限流保护